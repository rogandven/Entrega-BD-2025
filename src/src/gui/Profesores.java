/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import database.Database;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedHashSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import validations.PrintableException;
import validations.Validations;

/**
 *
 * @author Roger
 */
public class Profesores extends javax.swing.JPanel {

    /**
     * Creates new form alumnos
     */
    public Profesores() {
        initComponents();
        this.getCmbProfesor().addActionListener(e -> {
            this.actualizarCamposDeTexto();
            this.actualizarTablaEspecialidades();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelProfesor = new javax.swing.JLabel();
        cmbProfesor = new javax.swing.JComboBox<>();
        txtNombres = new javax.swing.JTextField();
        labelNombres = new javax.swing.JLabel();
        txtApellidoPaterno = new javax.swing.JTextField();
        labelApellidoPaterno = new javax.swing.JLabel();
        txtApellidoMaterno = new javax.swing.JTextField();
        labelApellidoMaterno = new javax.swing.JLabel();
        labelDireccion = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        labelCiudad = new javax.swing.JLabel();
        txtCiudad = new javax.swing.JTextField();
        labelEspecialidades = new javax.swing.JLabel();
        tableEspecialidadesContainer = new javax.swing.JScrollPane();
        tableEspecialidades = new javax.swing.JTable();
        btnCrearProfesor = new javax.swing.JButton();
        btnModificarProfesor = new javax.swing.JButton();
        btnEliminarProfesor = new javax.swing.JButton();
        cmbEspecialidad = new javax.swing.JComboBox<>();
        labelEspecialidad = new javax.swing.JLabel();
        btnAgregarEspecialidad = new javax.swing.JButton();
        btnEliminarEspecialidad = new javax.swing.JButton();

        labelProfesor.setText("Profesor:");

        labelNombres.setText("Nombres:");

        labelApellidoPaterno.setText("Apellido P:");

        labelApellidoMaterno.setText("Apellido M:");

        labelDireccion.setText("Dirección:");

        labelCiudad.setText("Ciudad:");

        labelEspecialidades.setText("Especialidades:");

        tableEspecialidades.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Descripción"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tableEspecialidades.setShowGrid(false);
        tableEspecialidades.getTableHeader().setReorderingAllowed(false);
        tableEspecialidadesContainer.setViewportView(tableEspecialidades);

        btnCrearProfesor.setText("Crear Profesor");
        btnCrearProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearProfesorActionPerformed(evt);
            }
        });

        btnModificarProfesor.setText("Modificar Profesor");
        btnModificarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarProfesorActionPerformed(evt);
            }
        });

        btnEliminarProfesor.setText("Eliminar Profesor");
        btnEliminarProfesor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProfesorActionPerformed(evt);
            }
        });

        labelEspecialidad.setText("Especialidad:");

        btnAgregarEspecialidad.setText("Agregar Especialidad");
        btnAgregarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarEspecialidadActionPerformed(evt);
            }
        });

        btnEliminarEspecialidad.setText("Eliminar Especialidad");
        btnEliminarEspecialidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarEspecialidadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelEspecialidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelProfesor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbProfesor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelNombres)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombres))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelApellidoPaterno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApellidoPaterno))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelApellidoMaterno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtApellidoMaterno))
                    .addComponent(tableEspecialidadesContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelEspecialidad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbEspecialidad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDireccion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDireccion))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelCiudad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCiudad))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCrearProfesor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificarProfesor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregarEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarEspecialidad, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbProfesor)
                    .addComponent(labelProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNombres, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelApellidoPaterno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtApellidoPaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelApellidoMaterno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtApellidoMaterno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDireccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCiudad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtCiudad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearProfesor)
                    .addComponent(btnModificarProfesor)
                    .addComponent(btnEliminarProfesor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelEspecialidades)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableEspecialidadesContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelEspecialidad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbEspecialidad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarEspecialidad)
                    .addComponent(btnEliminarEspecialidad))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
        /*
        try {

        } catch (PrintableException e) {
            this.showSimplifiedDialog(e.getMessage(), "Error!");
        } catch (Exception e) {
            this.showSimplifiedDialog("Error desconocido.", "Error!");
        } 
        */
    
    private void btnCrearProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearProfesorActionPerformed
        try {
            this.crearProfesor();
            this.obtenerDatos();
            this.actualizarTodo();
        } catch (PrintableException e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog(e.getMessage(), "Error!");
        } catch (Exception e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog("Error desconocido.", "Error!");
        } 

        Profesores.showSimplifiedDialog("¡Profesor creado con éxito!", "¡Éxito!");
    }//GEN-LAST:event_btnCrearProfesorActionPerformed

    private void btnModificarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarProfesorActionPerformed
        // TODO add your handling code here:
        try {
            this.modificarProfesor();
            this.obtenerDatos();
            this.actualizarTodo();
            Profesores.showSimplifiedDialog("¡Profesor modificado con éxito!", "¡Éxito!");
        } catch (PrintableException e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog(e.getMessage(), "Error!");
        } catch (Exception e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog("Error desconocido.", "Error!");
        } 

    }//GEN-LAST:event_btnModificarProfesorActionPerformed

    private void btnEliminarProfesorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProfesorActionPerformed
        // TODO add your handling code here:
        try {
            this.eliminarProfesor();
            this.obtenerDatos();
            this.actualizarTodo();
            Profesores.showSimplifiedDialog("¡Profesor eliminado con éxito!", "¡Éxito!");
        } catch (PrintableException e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog(e.getMessage(), "Error!");
        } catch (Exception e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog("Error desconocido.", "Error!");
        } 

    }//GEN-LAST:event_btnEliminarProfesorActionPerformed

    private void btnAgregarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarEspecialidadActionPerformed
        // TODO add your handling code here:
        try {
            this.agregarEspecialidad();
            this.obtenerDatos();
            this.actualizarTodo();
        } catch (PrintableException e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog(e.getMessage(), "Error!");
        } catch (Exception e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog("Error desconocido.", "Error!");
        } 

        Profesores.showSimplifiedDialog("¡Especialidad agregada con éxito!", "¡Éxito!");
    }//GEN-LAST:event_btnAgregarEspecialidadActionPerformed

    private void btnEliminarEspecialidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarEspecialidadActionPerformed
        // TODO add your handling code here:
        try {
            this.eliminarEspecialidad();
            this.obtenerDatos();
            this.actualizarTodo();
            Profesores.showSimplifiedDialog("¡Especialidad eliminada con éxito!", "¡Éxito!");
        } catch (PrintableException e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog(e.getMessage(), "Error!");
        } catch (Exception e) {
            PrintableException.PrintOtherException(e);
            this.showSimplifiedDialog("Error desconocido.", "Error!");
        } 
    }//GEN-LAST:event_btnEliminarEspecialidadActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarEspecialidad;
    private javax.swing.JButton btnCrearProfesor;
    private javax.swing.JButton btnEliminarEspecialidad;
    private javax.swing.JButton btnEliminarProfesor;
    private javax.swing.JButton btnModificarProfesor;
    private javax.swing.JComboBox<String> cmbEspecialidad;
    private javax.swing.JComboBox<String> cmbProfesor;
    private javax.swing.JLabel labelApellidoMaterno;
    private javax.swing.JLabel labelApellidoPaterno;
    private javax.swing.JLabel labelCiudad;
    private javax.swing.JLabel labelDireccion;
    private javax.swing.JLabel labelEspecialidad;
    private javax.swing.JLabel labelEspecialidades;
    private javax.swing.JLabel labelNombres;
    private javax.swing.JLabel labelProfesor;
    private javax.swing.JTable tableEspecialidades;
    private javax.swing.JScrollPane tableEspecialidadesContainer;
    private javax.swing.JTextField txtApellidoMaterno;
    private javax.swing.JTextField txtApellidoPaterno;
    private javax.swing.JTextField txtCiudad;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtNombres;
    // End of variables declaration//GEN-END:variables

    public JButton getBtnAgregarEspecialidad() {
        return btnAgregarEspecialidad;
    }

    public void setBtnAgregarEspecialidad(JButton btnAgregarEspecialidad) {
        this.btnAgregarEspecialidad = btnAgregarEspecialidad;
    }

    public JButton getBtnCrearProfesor() {
        return btnCrearProfesor;
    }

    public void setBtnCrearProfesor(JButton btnCrearProfesor) {
        this.btnCrearProfesor = btnCrearProfesor;
    }

    public JButton getBtnEliminarEspecialidad() {
        return btnEliminarEspecialidad;
    }

    public void setBtnEliminarEspecialidad(JButton btnEliminarEspecialidad) {
        this.btnEliminarEspecialidad = btnEliminarEspecialidad;
    }

    public JButton getBtnEliminarProfesor() {
        return btnEliminarProfesor;
    }

    public void setBtnEliminarProfesor(JButton btnEliminarProfesor) {
        this.btnEliminarProfesor = btnEliminarProfesor;
    }

    public JButton getBtnModificarProfesor() {
        return btnModificarProfesor;
    }

    public void setBtnModificarProfesor(JButton btnModificarProfesor) {
        this.btnModificarProfesor = btnModificarProfesor;
    }

    public JComboBox<String> getCmbEspecialidad() {
        return cmbEspecialidad;
    }

    public void setCmbEspecialidad(JComboBox<String> cmbEspecialidad) {
        this.cmbEspecialidad = cmbEspecialidad;
    }

    public JComboBox<String> getCmbProfesor() {
        return cmbProfesor;
    }

    public void setCmbProfesor(JComboBox<String> cmbProfesor) {
        this.cmbProfesor = cmbProfesor;
    }

    public JLabel getLabelApellidoMaterno() {
        return labelApellidoMaterno;
    }

    public void setLabelApellidoMaterno(JLabel labelApellidoMaterno) {
        this.labelApellidoMaterno = labelApellidoMaterno;
    }

    public JLabel getLabelApellidoPaterno() {
        return labelApellidoPaterno;
    }

    public void setLabelApellidoPaterno(JLabel labelApellidoPaterno) {
        this.labelApellidoPaterno = labelApellidoPaterno;
    }

    public JLabel getLabelCiudad() {
        return labelCiudad;
    }

    public void setLabelCiudad(JLabel labelCiudad) {
        this.labelCiudad = labelCiudad;
    }

    public JLabel getLabelDireccion() {
        return labelDireccion;
    }

    public void setLabelDireccion(JLabel labelDireccion) {
        this.labelDireccion = labelDireccion;
    }

    public JLabel getLabelEspecialidad() {
        return labelEspecialidad;
    }

    public void setLabelEspecialidad(JLabel labelEspecialidad) {
        this.labelEspecialidad = labelEspecialidad;
    }

    public JLabel getLabelEspecialidades() {
        return labelEspecialidades;
    }

    public void setLabelEspecialidades(JLabel labelEspecialidades) {
        this.labelEspecialidades = labelEspecialidades;
    }

    public JLabel getLabelNombres() {
        return labelNombres;
    }

    public void setLabelNombres(JLabel labelNombres) {
        this.labelNombres = labelNombres;
    }

    public JLabel getLabelProfesor() {
        return labelProfesor;
    }

    public void setLabelProfesor(JLabel labelProfesor) {
        this.labelProfesor = labelProfesor;
    }

    public JTable getTableEspecialidades() {
        return tableEspecialidades;
    }

    public void setTableEspecialidades(JTable tableEspecialidades) {
        this.tableEspecialidades = tableEspecialidades;
    }

    public JScrollPane getTableEspecialidadesContainer() {
        return tableEspecialidadesContainer;
    }

    public void setTableEspecialidadesContainer(JScrollPane tableEspecialidadesContainer) {
        this.tableEspecialidadesContainer = tableEspecialidadesContainer;
    }

    public JTextField getTxtApellidoMaterno() {
        return txtApellidoMaterno;
    }

    public void setTxtApellidoMaterno(JTextField txtApellidoMaterno) {
        this.txtApellidoMaterno = txtApellidoMaterno;
    }

    public JTextField getTxtApellidoPaterno() {
        return txtApellidoPaterno;
    }

    public void setTxtApellidoPaterno(JTextField txtApellidoPaterno) {
        this.txtApellidoPaterno = txtApellidoPaterno;
    }

    public JTextField getTxtCiudad() {
        return txtCiudad;
    }

    public void setTxtCiudad(JTextField txtCiudad) {
        this.txtCiudad = txtCiudad;
    }

    public JTextField getTxtDireccion() {
        return txtDireccion;
    }

    public void setTxtDireccion(JTextField txtDireccion) {
        this.txtDireccion = txtDireccion;
    }

    public JTextField getTxtNombres() {
        return txtNombres;
    }

    public void setTxtNombres(JTextField txtNombres) {
        this.txtNombres = txtNombres;
    }

    public Database getDatabase() {
        return database;
    }

    public void setDatabase(Database database) {
        this.database = database;
    }

    public String[][] getDatosProfesores() {
        return datosProfesores;
    }

    public void setDatosProfesores(String[][] datosProfesores) {
        this.datosProfesores = datosProfesores;
    }

    public String[][] getDatosEspecialidades() {
        return datosEspecialidades;
    }

    public void setDatosEspecialidades(String[][] datosEspecialidades) {
        this.datosEspecialidades = datosEspecialidades;
    }

    public String[][] getDatosCmbEspecialidades() {
        return datosCmbEspecialidades;
    }

    public void setDatosCmbEspecialidades(String[][] datosCmbEspecialidades) {
        this.datosCmbEspecialidades = datosCmbEspecialidades;
    }
    
    private Database database;
    
    private String[][] datosProfesores;
    private String[][] datosEspecialidades;
    private String[][] datosCmbEspecialidades;

    public static final String GET_PROFESORES_QUERY = "SELECT rut, nombres, apellido_paterno, apellido_materno, direccion, ciudad FROM profesor;";
    public static final int PROFESOR_RUT = 0;
    public static final int PROFESOR_NOMBRE = 1;
    public static final int PROFESOR_AP = 2;
    public static final int PROFESOR_AM = 3;
    public static final int PROFESOR_DIRECCION = 4;
    public static final int PROFESOR_CIUDAD = 5;
    
    public static final String GET_ESPECIALIDADES_QUERY = "SELECT p.rut, t.codigo_especialidad AS codigo, e.descripcion AS desk FROM profesor p LEFT JOIN tiene t ON p.rut = t.rut_profesor LEFT JOIN especialidad e ON t.codigo_especialidad = e.codigo;";
    public static final String GET_CMB_ESPECIALIDADES_QUERY = "SELECT e.codigo FROM especialidad e;";
    public static final int ESPECIALIDAD_RUT = 0;
    public static final int ESPECIALIDAD_CODIGO = 1;
    public static final int ESPECIALIDAD_DESCRIPCION = 2;
    
    public void obtenerDatos() throws PrintableException {
       this.setDatosProfesores(database.doReceivingQuery(GET_PROFESORES_QUERY, 6));
       this.setDatosEspecialidades(database.doReceivingQuery(GET_ESPECIALIDADES_QUERY, 3));
       this.setDatosCmbEspecialidades(database.doReceivingQuery(GET_CMB_ESPECIALIDADES_QUERY, 1));
    }
    
    public String[] buscarPorRutProfesor() {
        Object rut = this.getCmbProfesor().getSelectedItem();
        if (rut == null) {
            return null;
        }
        String convertedRut = rut.toString();
        
        for (String[] s : datosProfesores) {
            if (convertedRut.equals(s[PROFESOR_RUT])) {
                return s;
            }
        }
        
        return null;
    }
    
    public String[][] buscarPorRutEspecialidad() {
        ArrayList<String[]> especialidades = new ArrayList<String[]>();
        
        Object rut = this.getCmbProfesor().getSelectedItem();
        if (rut == null) {
            return null;
        }
        String convertedRut = rut.toString();
        
        for (String[] s : datosEspecialidades) {
            if (convertedRut.equals(s[ESPECIALIDAD_RUT])) {
                especialidades.add(s);
            }
        }
        
        return especialidades.toArray(String[][]::new);
    }
    
    public void actualizarCamposDeTexto() {
        String[] datos = buscarPorRutProfesor();
        if (datos != null) {
            this.getTxtNombres().setText(datos[PROFESOR_NOMBRE]);
            this.getTxtApellidoMaterno().setText(datos[PROFESOR_AM]);
            this.getTxtApellidoPaterno().setText(datos[PROFESOR_AP]);
            this.getTxtCiudad().setText(datos[PROFESOR_CIUDAD]);
            this.getTxtDireccion().setText(datos[PROFESOR_DIRECCION]);
        } else {
            this.getTxtNombres().setText("");
            this.getTxtApellidoMaterno().setText("");
            this.getTxtApellidoPaterno().setText("");
            this.getTxtCiudad().setText("");
            this.getTxtDireccion().setText("");
        }
    }
    
    public void actualizarCmbProfesor() {
        ArrayList<String> profesores = new ArrayList<>();
        for (String[] s : this.datosProfesores) {
            profesores.add(s[PROFESOR_RUT]);
        }
        String[] nombres = profesores.toArray(String[]::new);
        this.getCmbProfesor().setModel(new DefaultComboBoxModel(nombres));
    }
    
    public void actualizarCmbEspecialidades() {
        LinkedHashSet<String> especialidades = new LinkedHashSet<>();
        for (String[] s : this.datosCmbEspecialidades) {
            // System.out.println(especialidades.toString());
            especialidades.add(s[0]);
        }
        String[] codigos = especialidades.toArray(String[]::new);
        this.getCmbEspecialidad().setModel(new DefaultComboBoxModel(codigos));
    }
    
    public void actualizarTablaEspecialidades() {
        String[] enunciados = {"Rut", "Código", "Especialidad"};
        String[][] datos = buscarPorRutEspecialidad();
        if (datos == null) {
            datos = new String[0][3];
        }
        this.getTableEspecialidades().setModel(new DefaultTableModel(datos, enunciados));
    }
    
    public void actualizarTodo() {
        actualizarCmbProfesor();
        actualizarCamposDeTexto();
        actualizarCmbEspecialidades();
        actualizarTablaEspecialidades();
    }
    
    public String pedirRut() {
        return JOptionPane.showInputDialog(this, "Ingrese el RUT del profesor a ingresar:");
    }
    
//  "SELECT rut, nombres, apellido_paterno, apellido_materno, direccion, ciudad FROM profesor;";    
    
    public void crearProfesor() throws PrintableException {
        String rut = Validations.validateRut(pedirRut());
        String nombres = Validations.validateString(this.getTxtNombres().getText(), "nombres");
        String AP = Validations.validateString(this.getTxtApellidoPaterno().getText(), "apellido paterno");
        String AM = Validations.validateString(this.getTxtApellidoMaterno().getText(), "apellido materno");
        String direccion = Validations.validateString(this.getTxtDireccion().getText(), "dirección");
        String ciudad = Validations.validateString(this.getTxtCiudad().getText(), "ciudad");
        
        String query = "INSERT INTO profesor (rut, nombres, apellido_paterno, apellido_materno, direccion, ciudad) VALUES ('" + rut + "', '" + nombres + "', '" + AP + "', '" + AM + "', '" + direccion + "', '" + ciudad + "');";
        database.doSendingQuery(query);
    }
    
    public void modificarProfesor() throws PrintableException {
        String rut = Validations.validateRut(this.getCmbProfesor().getSelectedItem().toString());
        String nombres = Validations.validateString(this.getTxtNombres().getText(), "nombres");
        String AP = Validations.validateString(this.getTxtApellidoPaterno().getText(), "apellido paterno");
        String AM = Validations.validateString(this.getTxtApellidoMaterno().getText(), "apellido materno");
        String direccion = Validations.validateString(this.getTxtDireccion().getText(), "dirección");
        String ciudad = Validations.validateString(this.getTxtCiudad().getText(), "ciudad");
        
        String query = "UPDATE profesor SET nombres = '" + nombres + "', apellido_paterno = '" + AP + "', apellido_materno = '" + AM + "', direccion = '" + direccion + "', ciudad = '" + ciudad + "' WHERE rut = '" + rut + "';";
        database.doSendingQuery(query);
    }

    public void eliminarProfesor() throws PrintableException {
        String rut = Validations.validateRut(this.getCmbProfesor().getSelectedItem().toString());
        String query = "DELETE FROM profesor WHERE rut = '" + rut + "';";
        database.doSendingQuery(query);
    }    
    
    public void agregarEspecialidad() throws PrintableException {
        String rut = Validations.validateRut(this.getCmbProfesor().getSelectedItem().toString());
        String especialidad = Validations.validatePositiveInt(this.getCmbEspecialidad().getSelectedItem().toString(), "especialidad").toString();
        String query = "INSERT INTO tiene (rut_profesor, codigo_especialidad) VALUES ('" + rut + "', " + especialidad + ");";
        database.doSendingQuery(query);
    }
    
    public void eliminarEspecialidad() throws PrintableException {
        String rut = Validations.validateRut(this.getCmbProfesor().getSelectedItem().toString());
        String especialidad = Validations.validatePositiveInt(this.getCmbEspecialidad().getSelectedItem().toString(), "especialidad").toString();
        String query = "DELETE FROM tiene WHERE rut_profesor = '" + rut + "' AND codigo_especialidad = " + especialidad + ";";
        database.doSendingQuery(query);
    }
    
    public static void showSimplifiedDialog(String error, String title) {
        JOptionPane.showMessageDialog(null, error, title, -1, null);
    }
}
