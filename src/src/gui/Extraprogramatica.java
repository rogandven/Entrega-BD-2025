/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import database.Database;
import java.util.ArrayList;
import java.util.HashSet;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Roger
 */
public class Extraprogramatica extends javax.swing.JPanel {

    /**
     * Creates new form alumnos
     */
    public Extraprogramatica() {
        initComponents();
        this.getCmbActividad().addActionListener(e -> {
            this.actualizarDatosActuales();
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelActividad = new javax.swing.JLabel();
        cmbActividad = new javax.swing.JComboBox<>();
        txtNombre = new javax.swing.JTextField();
        labelNombre = new javax.swing.JLabel();
        txtDia = new javax.swing.JTextField();
        labelDia = new javax.swing.JLabel();
        txtHoraInicio = new javax.swing.JTextField();
        labelHoraInicio = new javax.swing.JLabel();
        labelHoraFin = new javax.swing.JLabel();
        txtHoraFin = new javax.swing.JTextField();
        labelCupos = new javax.swing.JLabel();
        txtCupos = new javax.swing.JTextField();
        labelLugar = new javax.swing.JLabel();
        txtLugar = new javax.swing.JTextField();
        labelProfesor = new javax.swing.JLabel();
        cmbProfesor = new javax.swing.JComboBox<>();
        labelAlumnos = new javax.swing.JLabel();
        tableAlumnosContainer = new javax.swing.JScrollPane();
        tableAlumnos = new javax.swing.JTable();
        btnCrearActividad = new javax.swing.JButton();
        btnModificarActividad = new javax.swing.JButton();
        btnEliminarActividad = new javax.swing.JButton();
        cmbAlumno = new javax.swing.JComboBox<>();
        labelAlumno = new javax.swing.JLabel();
        btnAgregarAlumno = new javax.swing.JButton();
        btnEliminarAlumno = new javax.swing.JButton();

        labelActividad.setText("Actividad:");

        labelNombre.setText("Nombre:");

        labelDia.setText("DÃ­a:");

        labelHoraInicio.setText("Hora Inicio:");

        labelHoraFin.setText("Hora Fin:");

        labelCupos.setText("Cupos:");

        labelLugar.setText("Lugar:");

        labelProfesor.setText("Profesor:");

        labelAlumnos.setText("Alumnos:");

        tableAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Rut", "Nombre"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableAlumnos.setShowGrid(false);
        tableAlumnos.getTableHeader().setReorderingAllowed(false);
        tableAlumnosContainer.setViewportView(tableAlumnos);
        if (tableAlumnos.getColumnModel().getColumnCount() > 0) {
            tableAlumnos.getColumnModel().getColumn(0).setResizable(false);
            tableAlumnos.getColumnModel().getColumn(1).setResizable(false);
        }

        btnCrearActividad.setText("Crear Actividad");
        btnCrearActividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearActividadActionPerformed(evt);
            }
        });

        btnModificarActividad.setText("Modificar Actividad");
        btnModificarActividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActividadActionPerformed(evt);
            }
        });

        btnEliminarActividad.setText("Eliminar Actividad");
        btnEliminarActividad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActividadActionPerformed(evt);
            }
        });

        labelAlumno.setText("Alumno:");

        btnAgregarAlumno.setText("Agregar Alumno");
        btnAgregarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAlumnoActionPerformed(evt);
            }
        });

        btnEliminarAlumno.setText("Eliminar Alumno");
        btnEliminarAlumno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarAlumnoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelAlumnos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelActividad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbActividad, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNombre))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelDia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDia))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelHoraInicio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraInicio))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelProfesor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbProfesor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(tableAlumnosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnCrearActividad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificarActividad)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarActividad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelAlumno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbAlumno, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAgregarAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelHoraFin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoraFin))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labelLugar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(labelCupos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCupos)
                            .addComponent(txtLugar))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cmbActividad)
                    .addComponent(labelActividad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtDia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelHoraInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtHoraFin)
                    .addComponent(labelHoraFin, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCupos, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCupos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelLugar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtLugar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelProfesor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbProfesor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCrearActividad)
                    .addComponent(btnModificarActividad)
                    .addComponent(btnEliminarActividad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelAlumnos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tableAlumnosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAlumno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbAlumno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarAlumno)
                    .addComponent(btnEliminarAlumno)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearActividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearActividadActionPerformed
        this.agregarActividad();
        this.obtenerDatos();
        this.actualizarTodos();
        Extraprogramatica.showSimplifiedDialog("Â¡Actividad creada con Ã©xito!", "Â¡Ãxito!");
    }//GEN-LAST:event_btnCrearActividadActionPerformed

    private void btnModificarActividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActividadActionPerformed
        // TODO add your handling code here:
        this.modificarActividad();
        this.obtenerDatos();
        this.actualizarTodos();
        Extraprogramatica.showSimplifiedDialog("Â¡Actividad modificada con Ã©xito!", "Â¡Ãxito!");
    }//GEN-LAST:event_btnModificarActividadActionPerformed

    private void btnEliminarActividadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActividadActionPerformed
        // TODO add your handling code here:
        this.eliminarActividad();
        this.obtenerDatos();
        this.actualizarTodos();
        Extraprogramatica.showSimplifiedDialog("Â¡Actividad eliminada con Ã©xito!", "Â¡Ãxito!");
    }//GEN-LAST:event_btnEliminarActividadActionPerformed

    private void btnAgregarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAlumnoActionPerformed
        // TODO add your handling code here:
        this.agregarAlumno();
        this.obtenerDatos();
        this.actualizarTodos();
        Extraprogramatica.showSimplifiedDialog("Â¡Alumno agregado con Ã©xito!", "Â¡Ãxito!");
    }//GEN-LAST:event_btnAgregarAlumnoActionPerformed

    private void btnEliminarAlumnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarAlumnoActionPerformed
        // TODO add your handling code here:
        this.eliminarAlumno();
        this.obtenerDatos();
        this.actualizarTodos();
        Extraprogramatica.showSimplifiedDialog("Â¡Alumno eliminado con Ã©xito!", "Â¡Ãxito!");
    }//GEN-LAST:event_btnEliminarAlumnoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarAlumno;
    private javax.swing.JButton btnCrearActividad;
    private javax.swing.JButton btnEliminarActividad;
    private javax.swing.JButton btnEliminarAlumno;
    private javax.swing.JButton btnModificarActividad;
    private javax.swing.JComboBox<String> cmbActividad;
    private javax.swing.JComboBox<String> cmbAlumno;
    private javax.swing.JComboBox<String> cmbProfesor;
    private javax.swing.JLabel labelActividad;
    private javax.swing.JLabel labelAlumno;
    private javax.swing.JLabel labelAlumnos;
    private javax.swing.JLabel labelCupos;
    private javax.swing.JLabel labelDia;
    private javax.swing.JLabel labelHoraFin;
    private javax.swing.JLabel labelHoraInicio;
    private javax.swing.JLabel labelLugar;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelProfesor;
    private javax.swing.JTable tableAlumnos;
    private javax.swing.JScrollPane tableAlumnosContainer;
    private javax.swing.JTextField txtCupos;
    private javax.swing.JTextField txtDia;
    private javax.swing.JTextField txtHoraFin;
    private javax.swing.JTextField txtHoraInicio;
    private javax.swing.JTextField txtLugar;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    public JButton getBtnAgregarAlumno() {
        return btnAgregarAlumno;
    }

    public void setBtnAgregarAlumno(JButton btnAgregarAlumno) {
        this.btnAgregarAlumno = btnAgregarAlumno;
    }

    public JButton getBtnCrearActividad() {
        return btnCrearActividad;
    }

    public void setBtnCrearActividad(JButton btnCrearActividad) {
        this.btnCrearActividad = btnCrearActividad;
    }

    public JButton getBtnEliminarActividad() {
        return btnEliminarActividad;
    }

    public void setBtnEliminarActividad(JButton btnEliminarActividad) {
        this.btnEliminarActividad = btnEliminarActividad;
    }

    public JButton getBtnEliminarAlumno() {
        return btnEliminarAlumno;
    }

    public void setBtnEliminarAlumno(JButton btnEliminarAlumno) {
        this.btnEliminarAlumno = btnEliminarAlumno;
    }

    public JButton getBtnModificarActividad() {
        return btnModificarActividad;
    }

    public void setBtnModificarActividad(JButton btnModificarActividad) {
        this.btnModificarActividad = btnModificarActividad;
    }

    public JComboBox<String> getCmbActividad() {
        return cmbActividad;
    }

    public void setCmbActividad(JComboBox<String> cmbActividad) {
        this.cmbActividad = cmbActividad;
    }

    public JComboBox<String> getCmbAlumno() {
        return cmbAlumno;
    }

    public void setCmbAlumno(JComboBox<String> cmbAlumno) {
        this.cmbAlumno = cmbAlumno;
    }

    public JComboBox<String> getCmbProfesor() {
        return cmbProfesor;
    }

    public void setCmbProfesor(JComboBox<String> cmbProfesor) {
        this.cmbProfesor = cmbProfesor;
    }

    public JLabel getLabelActividad() {
        return labelActividad;
    }

    public void setLabelActividad(JLabel labelActividad) {
        this.labelActividad = labelActividad;
    }

    public JLabel getLabelAlumno() {
        return labelAlumno;
    }

    public void setLabelAlumno(JLabel labelAlumno) {
        this.labelAlumno = labelAlumno;
    }

    public JLabel getLabelAlumnos() {
        return labelAlumnos;
    }

    public void setLabelAlumnos(JLabel labelAlumnos) {
        this.labelAlumnos = labelAlumnos;
    }

    public JLabel getLabelCupos() {
        return labelCupos;
    }

    public void setLabelCupos(JLabel labelCupos) {
        this.labelCupos = labelCupos;
    }

    public JLabel getLabelDia() {
        return labelDia;
    }

    public void setLabelDia(JLabel labelDia) {
        this.labelDia = labelDia;
    }

    public JLabel getLabelHoraFin() {
        return labelHoraFin;
    }

    public void setLabelHoraFin(JLabel labelHoraFin) {
        this.labelHoraFin = labelHoraFin;
    }

    public JLabel getLabelHoraInicio() {
        return labelHoraInicio;
    }

    public void setLabelHoraInicio(JLabel labelHoraInicio) {
        this.labelHoraInicio = labelHoraInicio;
    }

    public JLabel getLabelLugar() {
        return labelLugar;
    }

    public void setLabelLugar(JLabel labelLugar) {
        this.labelLugar = labelLugar;
    }

    public JLabel getLabelNombre() {
        return labelNombre;
    }

    public void setLabelNombre(JLabel labelNombre) {
        this.labelNombre = labelNombre;
    }

    public JLabel getLabelProfesor() {
        return labelProfesor;
    }

    public void setLabelProfesor(JLabel labelProfesor) {
        this.labelProfesor = labelProfesor;
    }

    public JTable getTableAlumnos() {
        return tableAlumnos;
    }

    public void setTableAlumnos(JTable tableAlumnos) {
        this.tableAlumnos = tableAlumnos;
    }

    public JScrollPane getTableAlumnosContainer() {
        return tableAlumnosContainer;
    }

    public void setTableAlumnosContainer(JScrollPane tableAlumnosContainer) {
        this.tableAlumnosContainer = tableAlumnosContainer;
    }

    public JTextField getTxtCupos() {
        return txtCupos;
    }

    public void setTxtCupos(JTextField txtCupos) {
        this.txtCupos = txtCupos;
    }

    public JTextField getTxtDia() {
        return txtDia;
    }

    public void setTxtDia(JTextField txtDia) {
        this.txtDia = txtDia;
    }

    public JTextField getTxtHoraFin() {
        return txtHoraFin;
    }

    public void setTxtHoraFin(JTextField txtHoraFin) {
        this.txtHoraFin = txtHoraFin;
    }

    public JTextField getTxtHoraInicio() {
        return txtHoraInicio;
    }

    public void setTxtHoraInicio(JTextField txtHoraInicio) {
        this.txtHoraInicio = txtHoraInicio;
    }

    public JTextField getTxtLugar() {
        return txtLugar;
    }

    public void setTxtLugar(JTextField txtLugar) {
        this.txtLugar = txtLugar;
    }

    public JTextField getTxtNombre() {
        return txtNombre;
    }

    public void setTxtNombre(JTextField txtNombre) {
        this.txtNombre = txtNombre;
    }
    
    private String[][] datosExtraprogramatica;
    private String[][] datosAlumnos;
    private String[][] datosProfesores;

    public String[][] getDatosExtraprogramatica() {
        return datosExtraprogramatica;
    }

    public void setDatosExtraprogramatica(String[][] datosExtraprogramatica) {
        this.datosExtraprogramatica = datosExtraprogramatica;
    }

    public String[][] getDatosAlumnos() {
        return datosAlumnos;
    }

    public void setDatosAlumnos(String[][] datosAlumnos) {
        this.datosAlumnos = datosAlumnos;
    }

    public String[][] getDatosProfesores() {
        return datosProfesores;
    }

    public void setDatosProfesores(String[][] datosProfesores) {
        this.datosProfesores = datosProfesores;
    }

    public Database getDatabase() {
        return database;
    }

    public void setDatabase(Database database) {
        this.database = database;
    }
    
    private Database database;
    public static final String GET_EXTRAPROGRAMATICA_QUERY = "SELECT codigo, nombre, dia, hora_inicio, hora_fin, cupos, lugar, rut_profesor FROM extraprogramatica;";
    public static final String GET_ALUMNOS_QUERY = "SELECT a.rut, a.nombres, p.codigo FROM alumno a LEFT JOIN participa p ON p.rut_alumno = a.rut;";
    public static final String GET_PROFESORES_QUERY = "SELECT p.rut, e.codigo FROM profesor p LEFT JOIN extraprogramatica e ON p.rut = e.rut_profesor;";
    
    public static final int EXT_CODIGO = 0;
    public static final int EXT_NOMBRE = 1;
    public static final int EXT_DIA = 2;
    public static final int EXT_HORAINICIO = 3;
    public static final int EXT_HORAFIN = 4;
    public static final int EXT_CUPOS = 5;
    public static final int EXT_LUGAR = 6;
    public static final int EXT_RUT_PROFESOR = 7;
    
    public static final int PROFESORES_RUT = 0;
    public static final int PROFESORES_CODIGO = 1;
    
    public static final int ALUMNOS_RUT = 0;
    public static final int ALUMNOS_NOMBRES = 1;
    public static final int ALUMNOS_CODIGO = 2;
    
    public void obtenerDatos() {
        this.setDatosAlumnos(database.doReceivingQuery(GET_ALUMNOS_QUERY, 3));
        this.setDatosProfesores(database.doReceivingQuery(GET_PROFESORES_QUERY, 3));
        this.setDatosExtraprogramatica(database.doReceivingQuery(GET_EXTRAPROGRAMATICA_QUERY, 8));
    }
    
    public void actualizarCmbActividad() {
        ArrayList<String> actividades = new ArrayList<>();
        for (String[] s : this.datosExtraprogramatica) {
            actividades.add(s[EXT_CODIGO]);
        }
        
        this.getCmbActividad().setModel(new DefaultComboBoxModel(actividades.toArray()));
        if (!actividades.isEmpty()) {
            this.getCmbActividad().setSelectedItem(0);
        } else {
            this.getCmbActividad().setSelectedItem(-1);
        }
    }
        
    public void actualizarCmbAlumno() {
        ArrayList<String> alumnos = new ArrayList<>();
        for (String[] s : this.datosAlumnos) {
            alumnos.add(s[ALUMNOS_RUT]);
        }
        
        this.getCmbAlumno().setModel(new DefaultComboBoxModel(alumnos.toArray()));
        if (!alumnos.isEmpty()) {
            this.getCmbAlumno().setSelectedItem(0);
        } else {
            this.getCmbAlumno().setSelectedItem(-1);
        }
    }
    
    public void actualizarTablaAlumnos() {
        ArrayList<String[]> alumnos = new ArrayList<>();
        Object codigo = this.getCmbActividad().getSelectedItem();
        String codigo2 = null;
        String[] actual = null;
        String[][] empty = null;
        String[] enunciados = {"Rut", "Nombre"};
        
        if (codigo != null) {
            codigo2 = codigo.toString();
            for (String[] s : this.datosAlumnos) {
                if (codigo2.equals(s[ALUMNOS_CODIGO])) {
                    actual = new String[2];
                    actual[ALUMNOS_RUT] = s[ALUMNOS_RUT];
                    actual[ALUMNOS_NOMBRES] = s[ALUMNOS_NOMBRES];
                    alumnos.add(actual);
                }
            }
            String[][] datos = (alumnos.toArray(String[][]::new));
            this.getTableAlumnos().setModel(new DefaultTableModel(datos, enunciados));
        } else {
            empty = new String[3][0];
            this.getTableAlumnos().setModel(new DefaultTableModel(empty, enunciados));
        }
    }
    
    public void actualizarCmbProfesor() {
        HashSet<String> profesores = new HashSet<>();
        for (String[] s : this.datosProfesores) {
            profesores.add(s[PROFESORES_RUT]);
        }
        this.getCmbProfesor().setModel(new DefaultComboBoxModel(profesores.toArray()));
        if (!profesores.isEmpty()) {
            this.getCmbActividad().setSelectedItem(0);
        } else {
            this.getCmbActividad().setSelectedItem(-1);
        }
    }  
    
    public String[] buscarPorCodigo() {
        Object codigo = this.getCmbActividad().getSelectedItem();
        if (codigo == null) {
            return null;
        }
        for (String[] s : this.datosExtraprogramatica) {
            if (codigo.equals(s[EXT_CODIGO])) {
                return s;
            }
        }
        return null;
    }

    public void actualizarDatosActuales() {
        String[] datos = buscarPorCodigo();
        this.getCmbProfesor().setSelectedItem(null);
        if (datos != null) {
            this.getTxtCupos().setText(datos[EXT_CUPOS]);
            this.getTxtDia().setText(datos[EXT_DIA]);
            this.getTxtHoraFin().setText(datos[EXT_HORAFIN]);
            this.getTxtHoraInicio().setText(datos[EXT_HORAINICIO]);
            this.getTxtLugar().setText(datos[EXT_LUGAR]);
            this.getTxtNombre().setText(datos[EXT_NOMBRE]);
            this.getCmbProfesor().setSelectedItem(datos[EXT_RUT_PROFESOR]);
        } else {
            this.getTxtCupos().setText("");
            this.getTxtDia().setText("");
            this.getTxtHoraFin().setText("");
            this.getTxtHoraInicio().setText("");
            this.getTxtLugar().setText("");
            this.getTxtNombre().setText("");
        }
        this.actualizarTablaAlumnos();
    }
    
    public void actualizarTodos() {
        this.actualizarCmbActividad();
        this.actualizarCmbAlumno();
        this.actualizarCmbProfesor();
        
        System.out.println(this.getCmbActividad().getModel().getSize());
        
        if (this.getCmbActividad().getModel().getSize() == 0) {
            this.getCmbActividad().setSelectedIndex(-1);
        } else {
            this.getCmbActividad().setSelectedIndex(0);
        }
        
        System.out.println(this.getCmbAlumno().getModel().getSize());
        
        if (this.getCmbAlumno().getModel().getSize() == 0) {
            this.getCmbAlumno().setSelectedIndex(-1);
        } else {
            this.getCmbAlumno().setSelectedIndex(0);
        }
        
        System.out.println(this.getCmbProfesor().getModel().getSize());
        
        if (this.getCmbProfesor().getModel().getSize() == 0) {
            this.getCmbProfesor().setSelectedIndex(-1);
        } else {
            this.getCmbProfesor().setSelectedIndex(0);
        }

        this.actualizarDatosActuales();
    }
    
    public Integer pedirCodigo() {
        return Integer.valueOf(JOptionPane.showInputDialog(this, "Ingrese el cÃ³digo de la actividad a ingresar:"));
    }
    
    public void agregarActividad() {
       String codigo = pedirCodigo().toString();
       String nombre = this.getTxtNombre().getText();
       String dia = this.getTxtDia().getText();
       String horaInicio = this.getTxtHoraInicio().getText();
       String horaFinal = this.getTxtHoraFin().getText();
       String cupos = this.getTxtCupos().getText();
       String lugar = this.getTxtLugar().getText();
       String profesor = this.getCmbProfesor().getSelectedItem().toString();
       
       String query = "INSERT INTO extraprogramatica (codigo, nombre, dia, hora_inicio, hora_fin, cupos, lugar, rut_profesor) VALUES (" + codigo + ", '" + nombre + "', " + dia + ", " + horaInicio + ", " + horaFinal + ", " + cupos + ", " + lugar + ", '" + profesor + "');";
       this.database.doSendingQuery(query);
    }
    
    public void modificarActividad() {
       String codigo = this.getCmbProfesor().getSelectedItem().toString();
       String nombre = this.getTxtNombre().getText();
       String dia = this.getTxtDia().getText();
       String horaInicio = this.getTxtHoraInicio().getText();
       String horaFinal = this.getTxtHoraFin().getText();
       String cupos = this.getTxtCupos().getText();
       String lugar = this.getTxtLugar().getText();
       String profesor = this.getCmbProfesor().getSelectedItem().toString();
       
       String query = "UPDATE extraprogramatica SET nombre = '" + nombre + "', dia = " + dia + ", hora_inicio = " + horaInicio + ", hora_fin = " + horaFinal + ", cupos = " + cupos + ", lugar = '" + lugar + "', rut_profesor = '" + profesor + "' WHERE codigo = " + codigo + ";";
       this.database.doSendingQuery(query);
    }
    
    public void eliminarActividad() {
        String codigo = this.getCmbProfesor().getSelectedItem().toString();
        String query = "DELETE FROM extraprogramatica WHERE codigo = " + codigo + ";";
        this.database.doSendingQuery(query);
    }
    
    public static void showSimplifiedDialog(String error, String title) {
        JOptionPane.showMessageDialog(null, error, title, -1, null);
    }
    
    public void agregarAlumno() {
        String rut = this.getCmbAlumno().getSelectedItem().toString();
        String actividad = this.getCmbActividad().getSelectedItem().toString();
        String query = "INSERT INTO participa (rut_alumno, codigo) VALUES ('" + rut + "', " + actividad + ");";
        this.database.doSendingQuery(query);
    }
    
    public void eliminarAlumno() {
        String rut = this.getCmbAlumno().getSelectedItem().toString();
        String actividad = this.getCmbActividad().getSelectedItem().toString();
        String query = "DELETE FROM participa WHERE rut = '" + rut + "' AND codigo = " + actividad + ";";
        this.database.doSendingQuery(query);
    }
}
